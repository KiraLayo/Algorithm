//
//  main.swift
//  172.TrailingZeroes
//
//  Created by yp-tc-m-2548 on 2021/3/1.
//  Copyright © 2021 KiraLayo. All rights reserved.
//
//
//172. 阶乘后的零
//给定一个整数 n，返回 n! 结果尾数中零的数量。
//
//示例 1:
//
//输入: 3
//输出: 0
//解释: 3! = 6, 尾数中没有零。
//示例 2:
//
//输入: 5
//输出: 1
//解释: 5! = 120, 尾数中有 1 个零.

class Solution {
    // 方法1: 直接算出阶乘结果，之后 % 10 计数
    // 缺点：阶乘结果容易溢出。

    // 方法2: 因为一个数可以分解成因子相乘，并且乘法有交换律，所以可以把尾数0位数看为最后用所有阶乘的数分解成因子统计最后2*5的对个数，又因为2的数量远大于5的数量，所以计算5的数量即可。
    // 优化：计算5的数量可以加速，因为将阶乘式子列出来，因为可能有数字存在有多个5作为因子，并且再次分解其中有5作为因子的数，之后每次进行分解5因子循环。加速即可加速算出
    func trailingZeroes(_ n: Int) -> Int {
        var res = 0;
        var ln = n;

        while ln >= 5 {
            res += ln/5;
            ln /= 5; // 算完5的，算25的之后125的以此类推,举例因为 n/25 = n/5/5;
        }
        return res;
    }
}
